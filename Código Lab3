// Universidad del Valle de Guatemala  
// BE3029 - Electrónica Digital 2  
// Marcela Castañeda - 23717  
// Laboratorio 03 - Interrupciones y Temporizador
// MCU: ESP32 dev kit 1.1 

//-------------------------------- LIBRERÍAS -------------------------------------// 
#include <Arduino.h> 
#include <stdint.h> 

// ------------------- DEFINICIONES ------------------- // 

// Definición de las LEDs 
#define LED_1 22 
#define LED_2 3 
#define LED_3 19 
#define LED_4 5 
 
// ------------------- VARIABLES GLOBALES ------------------- // 

// Variable para el contador
volatile int32_t contador;  

// Instanciar el temporizador 0
hw_timer_t* Timer0_Cfg = NULL;

// --------------------- PROTOTIPOS DE FUNCIÓN ---------------------- //
void initTimer0(void); 
void contadorBinario(void);

// -------------------- ISRs rutinas de interrupción ------------------- //
void IRAM_ATTR TMR0_ISR(void) {
  contador++;                    // ¡Incrementar el contador!
  if (contador > 15) contador = 0; // Reiniciar si pasa de 15
    contadorBinario(); // Llamar a la función del contador binario
}

// -------------------------------------- SETUP ------------------- // 
void setup() { 
  Serial.begin(115200); 

  contador = 0;  

  // Configurar pines como salidas 
  pinMode(LED_1, OUTPUT); 
  pinMode(LED_2, OUTPUT); 
  pinMode(LED_3, OUTPUT); 
  pinMode(LED_4, OUTPUT); 

  // Apagar LEDs al inicio
  digitalWrite(LED_1, LOW); 
  digitalWrite(LED_2, LOW); 
  digitalWrite(LED_3, LOW); 
  digitalWrite(LED_4, LOW); 

  initTimer0(); // Inicializar el temporizador 0
} 

// ------------------- LOOP ------------------- //
void loop() {
  // En el loop no se coloca nada porque todo lo realiza el temporizador 
}

// ------------------- FUNCIONES ------------------- //

// Inicializar el temporizador 0 
void initTimer0(void) {
  Timer0_Cfg = timerBegin(0, 80, true); // Timer 0, con prescaler de 80              
  timerAttachInterrupt(Timer0_Cfg, &TMR0_ISR, true); // Llamar a la ISR  
  timerAlarmWrite(Timer0_Cfg, 250000, true);              
  timerAlarmEnable(Timer0_Cfg);                           
}

// Función para el contador binario
void contadorBinario(void) {
  digitalWrite(LED_1, (contador & 0x01) ? HIGH : LOW); 
  digitalWrite(LED_2, (contador & 0x02) ? HIGH : LOW); 
  digitalWrite(LED_3, (contador & 0x04) ? HIGH : LOW); 
  digitalWrite(LED_4, (contador & 0x08) ? HIGH : LOW); 
}
